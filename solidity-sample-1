pragma solidity ^0.4.13;
contract SampleToken {
   mapping (address => uint256) balances;
   event Transfer(address indexed from, address indexed to, uint256 value);
   event Approval(address indexed owner, address indexed spender, uint256 value);
   mapping (address => mapping (address => uint256)) allowed;
   uint public totalSupply;
   address tokenLaunch;

   function SampleToken() public {
       totalSupply = 1000000 * 10**18;
       balances[msg.sender] = totalSupply;
   }

   function transfer(address _to, uint256 _value) public returns (bool success) {
       if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
           balances[msg.sender] -= _value;
           balances[_to] += _value;
           emit Transfer(msg.sender, _to, _value);
           return true;
       } else { return false; }
   }

   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
       if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
           balances[_to] += _value;
           balances[_from] -= _value;
           allowed[_from][msg.sender] -= _value;
           emit Transfer(_from, _to, _value);
           return true;
       } else { return false; }
   }

   function balanceOf(address _owner) public constant returns (uint256 balance) {
       return balances[_owner];
   }

   function approve(address _spender, uint256 _value) public returns (bool success) {
       allowed[msg.sender][_spender] = _value;
       emit Approval(msg.sender, _spender, _value);
       return true;
   }

   function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
       return allowed[_owner][_spender];
   }

   function registerTokenLaunch() public {
       if(tokenLaunch == 0x0) {
           tokenLaunch = msg.sender;
       }
   }
}
